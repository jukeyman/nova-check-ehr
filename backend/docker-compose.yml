# ============================================================================
# NOVA CHECK EHR - DOCKER COMPOSE CONFIGURATION
# ============================================================================

version: '3.8'

services:
  # ============================================================================
  # DATABASE SERVICE - PostgreSQL
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: nova-check-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nova_check_ehr}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - nova-check-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nova_check_ehr}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # CACHE SERVICE - Redis
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: nova-check-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - nova-check-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # BACKEND API SERVICE
  # ============================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: nova-check-backend
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3001}
      API_VERSION: ${API_VERSION:-v1}
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-nova_check_ehr}?schema=public
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      
      # Encryption
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-character-encryption-key}
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-your-email@gmail.com}
      SMTP_PASS: ${SMTP_PASS:-your-app-password}
      
      # SMS
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-your-twilio-sid}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-your-twilio-token}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-+1234567890}
      
      # File Upload
      UPLOAD_PROVIDER: ${UPLOAD_PROVIDER:-local}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-image/jpeg,image/png,image/gif,application/pdf,text/plain}
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-combined}
      
      # Health Check
      HEALTH_CHECK_ENABLED: ${HEALTH_CHECK_ENABLED:-true}
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-30000}
    ports:
      - "${PORT:-3001}:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - nova-check-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # DATABASE ADMIN - pgAdmin (Optional)
  # ============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nova-check-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@novacheck.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - nova-check-network
    depends_on:
      - postgres
    profiles:
      - admin

  # ============================================================================
  # REDIS ADMIN - Redis Commander (Optional)
  # ============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nova-check-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis123}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - nova-check-network
    depends_on:
      - redis
    profiles:
      - admin

  # ============================================================================
  # MONITORING - Prometheus (Optional)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: nova-check-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - nova-check-network
    profiles:
      - monitoring

  # ============================================================================
  # MONITORING - Grafana (Optional)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: nova-check-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - nova-check-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  nova-check-network:
    driver: bridge
    name: nova-check-network

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
    name: nova-check-postgres-data
  
  redis_data:
    driver: local
    name: nova-check-redis-data
  
  pgadmin_data:
    driver: local
    name: nova-check-pgadmin-data
  
  prometheus_data:
    driver: local
    name: nova-check-prometheus-data
  
  grafana_data:
    driver: local
    name: nova-check-grafana-data